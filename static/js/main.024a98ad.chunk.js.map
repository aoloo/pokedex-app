{"version":3,"sources":["utils/utils.js","components/Layout/Layout.js","components/Search/Search.js","components/Card/CardActions.js","components/Card/PokemonCard.js","components/Drawer/PokemonDrawer.js","components/Display/ResultNotFound.js","App.js","reportWebVitals.js","components/Layout/Theme.js","index.js"],"names":["fetchData","endpoint","a","fetch","response","json","data","text","saveToLocalStorage","key","item","localStorage","setItem","JSON","stringify","Layout","props","useColorMode","colorMode","toggleColorMode","backgroundColor","float","margin","onClick","Moon","fontSize","Sun","marginTop","textAlign","fontWeight","stroke","color","outline","renderSearch","renderCard","Search","debouncedSearch","useState","value","setValue","children","verticalAlign","placeholder","size","onChange","e","target","memo","savedPokemons","handlePokemonSave","handlePokemonDelete","pokemon","view","id","abilities","name","sprites","types","filter","poke","length","Star","w","h","front_default","leftIcon","Add","colorScheme","variant","Delete","Container","styled","div","PokemonCard","setSavedPokemons","borderWidth","borderRadius","overflow","src","alt","className","pokemonObj","filteredPokemonList","map","ability","slot","type","PokemonDrawer","isOpen","onClose","placement","style","ResultNotFound","App","searchString","setSearchString","searchResult","setSearchResult","isLoading","setIsLoading","useDisclosure","onOpen","getItem","parse","getLocalStorageItem","useEffect","getPokeDexData","toLowerCase","results","useCallback","debounce","searchValue","handleClick","as","paddingRight","cursor","Object","keys","hasOwnProperty","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.024a98ad.chunk.js","sourcesContent":["/**\r\n * Handles fetch request via specified endpoint.\r\n */\r\nconst fetchData = async (endpoint) => {\r\n  try {\r\n    const response = await fetch(endpoint);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    return { text: \"not found\" };\r\n  }\r\n};\r\n\r\n/**\r\n * Gets item from localstorage based by key.\r\n * @param  {} key\r\n */\r\nconst getLocalStorageItem = (key) => {\r\n  if (localStorage.getItem(key)) return JSON.parse(localStorage.getItem(key));\r\n};\r\n\r\n/**\r\n * Saves item to localstorage.\r\n * @param  {String} key\r\n * @param  {Int | Number | Object} item\r\n */\r\nconst saveToLocalStorage = (key, item) => {\r\n  localStorage.setItem(key, JSON.stringify(item));\r\n};\r\n\r\n/**\r\n * executes fetch request to pokedex api.\r\n * @param  {String} searchString\r\n */\r\nconst getPokeDexData = async (searchString) => {\r\n  return await fetchData(\r\n    `https://pokeapi.co/api/v2/pokemon/${searchString}?limit=10`\r\n  );\r\n};\r\n\r\nexport { fetchData, getPokeDexData, getLocalStorageItem, saveToLocalStorage };\r\n","import React from \"react\";\r\n\r\n//@dependencies\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useColorMode } from \"@chakra-ui/color-mode\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { SimpleGrid, GridItem, Container, Text } from \"@chakra-ui/react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\n\r\n/**\r\n * App layout to display components.\r\n * @param  {} {children} Rendered children components.\r\n */\r\nconst Layout = (props) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  return (\r\n    <>\r\n      <SimpleGrid>\r\n        <GridItem>\r\n          <Box>\r\n            <Button\r\n              backgroundColor=\"transparent\"\r\n              float=\"right\"\r\n              margin=\"3\"\r\n              onClick={toggleColorMode}\r\n            >\r\n              {colorMode === \"light\" ? (\r\n                <MoonIcon fontSize=\"20\" />\r\n              ) : (\r\n                <SunIcon fontSize=\"20\" />\r\n              )}\r\n            </Button>\r\n          </Box>\r\n        </GridItem>\r\n      </SimpleGrid>\r\n      <Container marginTop={\"40px\"}>\r\n        <Text\r\n          textAlign=\"center\"\r\n          fontWeight={700}\r\n          margin={\"20px\"}\r\n          fontSize=\"30px\"\r\n          stroke=\"black\"\r\n          color=\"black.500\"\r\n          outline=\"blue\"\r\n        >\r\n          Pokemon Card\r\n        </Text>\r\n        <Box> {props.renderSearch()}</Box>\r\n        <Box marginTop={\"50px\"}>{props.renderCard()}</Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { useState } from \"react\";\r\n\r\n//@dependencies\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Stack, InputLeftElement, InputGroup } from \"@chakra-ui/react\";\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\n\r\n/**\r\n * Displays a search component.\r\n * @param  {Function} {debouncedSearch}\r\n */\r\nconst Search = ({ debouncedSearch }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  /**\r\n   * Updates search component state.\r\n   * @param  {Object} e\r\n   */\r\n  const handleSearchChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    setValue(value);\r\n    debouncedSearch(value);\r\n  };\r\n\r\n  return (\r\n    <Stack>\r\n      <InputGroup>\r\n        <InputLeftElement\r\n          children={<SearchIcon verticalAlign=\"middle\" marginTop=\"10px\" />}\r\n        />\r\n        <Input\r\n          placeholder=\"Search by pokemon name or number\"\r\n          size=\"lg\"\r\n          value={value}\r\n          onChange={handleSearchChange}\r\n        />\r\n      </InputGroup>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { memo } from \"react\";\r\n\r\n//@dependencies\r\nimport { StarIcon, DeleteIcon, AddIcon } from \"@chakra-ui/icons\";\r\nimport { Button, Alert, AlertIcon } from \"@chakra-ui/react\";\r\n\r\n//Renders pokemon card action buttons\r\nexport default memo(function CardActions({\r\n  savedPokemons,\r\n  handlePokemonSave,\r\n  handlePokemonDelete,\r\n  pokemon,\r\n  view,\r\n}) {\r\n  const { id, abilities, name, sprites, types } = pokemon;\r\n  return (\r\n    <>\r\n      {view === \"default\" ? (\r\n        <>\r\n          {savedPokemons.filter((poke) => poke.id === id).length > 0 ? (\r\n            <StarIcon color={\"yellow.300\"} w={8} h={8} />\r\n          ) : (\r\n            <Button\r\n              size=\"md\"\r\n              onClick={() =>\r\n                handlePokemonSave({\r\n                  id,\r\n                  name,\r\n                  abilities,\r\n                  sprites: { front_default: sprites.front_default },\r\n                  types,\r\n                })\r\n              }\r\n              leftIcon={<AddIcon color={\"blackAlpha.300\"} />}\r\n              colorScheme=\"green\"\r\n              variant=\"solid\"\r\n            >\r\n              Save\r\n            </Button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Button\r\n          size=\"md\"\r\n          onClick={() => handlePokemonDelete(savedPokemons, id)}\r\n          leftIcon={<DeleteIcon color={\"white\"} />}\r\n          colorScheme=\"red\"\r\n          variant=\"solid\"\r\n        >\r\n          Delete\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import React, { useState, memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n//@dependencies\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { Tag, TagLabel } from \"@chakra-ui/react\";\r\n\r\n//@util functions\r\nimport { saveToLocalStorage } from \"../../utils/utils\";\r\n\r\n//@Components\r\nimport CardActions from \"./CardActions\";\r\n\r\n//@Custom styled components\r\nconst Container = styled.div`\r\n  div:first-child {\r\n    background-color: #f2f9ff;\r\n  }\r\n\r\n  h6 {\r\n    padding: 4px; 6px;\r\n    color: grey\r\n  }\r\n\r\n  div.actions__section {\r\n   display: flex;\r\n\r\n    p {\r\n    font-weight: 500;\r\n    padding: 4px; 6px;\r\n    font-size: 20px;\r\n    }\r\n    button {\r\n      margin-left: auto;\r\n      margin-right: 10px\r\n    }\r\n\r\n    svg {\r\n      margin-left: auto;\r\n      margin-right: 10px;\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  img {\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 230px;\r\n  }\r\n`;\r\n\r\n/**\r\n * A component to display pokemon details on card.\r\n * @param  {Object} {searchResults}\r\n */\r\nconst PokemonCard = ({ pokemon, savedPokemons, setSavedPokemons, view }) => {\r\n  const { abilities, name, sprites, types } = pokemon;\r\n\r\n  /**\r\n   * Save pokemon obj detail to localstorage.\r\n   * @param  {Object} pokemonObj\r\n   */\r\n  const handlePokemonSave = (pokemonObj) => {\r\n    setSavedPokemons([...savedPokemons, pokemonObj]);\r\n    saveToLocalStorage(\"savedPokemons\", [...savedPokemons, pokemonObj]);\r\n  };\r\n\r\n  /**\r\n   * Removes saved pokemon by id.\r\n   * @param  {Array} savedPokemons\r\n   * @param  {int} id\r\n   */\r\n  const handlePokemonDelete = (savedPokemons, id) => {\r\n    const filteredPokemonList = savedPokemons.filter((poke) => poke.id !== id);\r\n\r\n    setSavedPokemons([...filteredPokemonList]);\r\n    saveToLocalStorage(\"savedPokemons\", [...filteredPokemonList]);\r\n  };\r\n\r\n  return (\r\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n      <Container>\r\n        <div>\r\n          <img src={sprites.front_default} alt={name} />\r\n        </div>\r\n        <div>\r\n          <h6>Name</h6>\r\n          <div className=\"actions__section\">\r\n            <p>{name}</p>\r\n            <CardActions\r\n              savedPokemons={savedPokemons}\r\n              handlePokemonSave={handlePokemonSave}\r\n              handlePokemonDelete={handlePokemonDelete}\r\n              pokemon={pokemon}\r\n              view={view}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h6>Abilities</h6>\r\n          <div>\r\n            {abilities.map(({ ability: { name }, slot }) => (\r\n              <Tag\r\n                size={\"md\"}\r\n                key={slot}\r\n                variant=\"outline\"\r\n                colorScheme=\"blue\"\r\n                margin={\"5px 3px\"}\r\n              >\r\n                <TagLabel>{name}</TagLabel>\r\n              </Tag>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h6>Types</h6>\r\n          <div>\r\n            {types.map(({ type: { name }, slot }) => (\r\n              <Tag\r\n                size={\"md\"}\r\n                key={slot}\r\n                variant=\"outline\"\r\n                colorScheme=\"blue\"\r\n                margin={\"5px 3px\"}\r\n              >\r\n                <TagLabel>{name}</TagLabel>\r\n              </Tag>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PokemonCard;\r\n","import React, { memo } from \"react\";\r\n\r\n//@dependencies\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\n\r\n//@components\r\nimport PokemonCard from \"../Card/PokemonCard\";\r\n\r\n//Renders saved pokemon cards\r\nconst PokemonDrawer = memo(\r\n  ({ isOpen, onClose, savedPokemons, setSavedPokemons }) => {\r\n    return (\r\n      <>\r\n        <Drawer isOpen={isOpen} placement=\"left\" onClose={onClose}>\r\n          <DrawerOverlay />\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Saved Cards</DrawerHeader>\r\n            <DrawerBody>\r\n              {savedPokemons.map((pokemon) => (\r\n                <div style={{ margin: \"10px 0px\" }}>\r\n                  <PokemonCard\r\n                    key={pokemon.id}\r\n                    savedPokemons={savedPokemons}\r\n                    pokemon={pokemon}\r\n                    setSavedPokemons={setSavedPokemons}\r\n                    view={\"drawer\"}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </DrawerBody>\r\n          </DrawerContent>\r\n        </Drawer>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default PokemonDrawer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n//@Custom styled components\r\nconst Container = styled.div`\r\n  display: block;\r\n  margin: auto;\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 20px;\r\n    font-weight: 700;\r\n  }\r\n  span {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\n/**\r\n * Displays a results not found component.\r\n */\r\nconst ResultNotFound = () => {\r\n  return (\r\n    <Container>\r\n      <p>\r\n        Pokemon Not Found <span>&#128532;</span>\r\n      </p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResultNotFound;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n//@dependencies\r\nimport debounce from \"lodash.debounce\";\r\nimport { Skeleton, Text, useDisclosure } from \"@chakra-ui/react\";\r\n\r\n//@util functions\r\nimport { fetchData, getLocalStorageItem } from \"./utils/utils\";\r\n\r\n//@components\r\nimport Layout from \"./components/Layout/Layout\";\r\nimport Search from \"./components/Search/Search\";\r\nimport PokemonCard from \"./components/Card/PokemonCard\";\r\nimport PokemonDrawer from \"./components/Drawer/PokemonDrawer\";\r\nimport ResultNotFound from \"./components/Display/ResultNotFound\";\r\n\r\nfunction App() {\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [savedPokemons, setSavedPokemons] = useState(\r\n    getLocalStorageItem(\"savedPokemons\") || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    const getPokeDexData = async (searchString) => {\r\n      searchString =\r\n        typeof searchString === \"string\"\r\n          ? searchString.toLowerCase()\r\n          : searchString;\r\n\r\n      setIsLoading(true);\r\n\r\n      const results = await fetchData(\r\n        `https://pokeapi.co/api/v2/pokemon/${searchString}?limit=10`\r\n      );\r\n      setSearchResult(results);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    if (searchString) getPokeDexData(searchString);\r\n  }, [searchString]);\r\n\r\n  /**\r\n   * Debounces state upate to search.\r\n   * @param  {Object} e\r\n   */\r\n  const debouncedSearch = useCallback(\r\n    debounce((searchValue) => {\r\n      if (searchValue) {\r\n        setSearchString(searchValue);\r\n      } else {\r\n        setSearchString(\"\");\r\n        setSearchResult([]);\r\n      }\r\n    }, 1000),\r\n    []\r\n  );\r\n\r\n  /**\r\n   * Drawer click event listener.\r\n   */\r\n  const handleClick = useCallback(() => onOpen(), []);\r\n\r\n  return (\r\n    <>\r\n      <Layout\r\n        renderSearch={() => (\r\n          <>\r\n            <Search debouncedSearch={debouncedSearch} />\r\n            {savedPokemons.length > 0 && (\r\n              <>\r\n                <Text\r\n                  as=\"u\"\r\n                  paddingRight=\"8px\"\r\n                  cursor=\"pointer\"\r\n                  color=\"#8080c1\"\r\n                  float=\"right\"\r\n                  onClick={handleClick}\r\n                >\r\n                  Saved\r\n                </Text>\r\n                {isOpen && (\r\n                  <PokemonDrawer\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                    savedPokemons={savedPokemons}\r\n                    setSavedPokemons={setSavedPokemons}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n        renderCard={() =>\r\n          isLoading ? (\r\n            <Skeleton h={300} />\r\n          ) : !isLoading &&\r\n            Object.keys(searchResult).length > 0 &&\r\n            !searchResult.hasOwnProperty(\"text\") ? (\r\n            <PokemonCard\r\n              pokemon={searchResult}\r\n              savedPokemons={savedPokemons}\r\n              setSavedPokemons={setSavedPokemons}\r\n              view={\"default\"}\r\n            />\r\n          ) : searchString && searchResult.text === \"not found\" ? (\r\n            <ResultNotFound />\r\n          ) : null\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\n//Config settings\r\nconst config = {\r\n  initialColorMode: \"light\",\r\n  useSystemColorMode: false,\r\n};\r\n\r\n/**\r\n * Application custom theming config\r\n * @param  {} {config}\r\n */\r\nconst Theme = extendTheme({ config });\r\n\r\nexport default Theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ColorModeScript } from \"@chakra-ui/react\";\r\nimport Theme from \"./components/Layout/Theme\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript initialColorMode={Theme.config.initialColorMode} />\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}